{"version":3,"sources":["utils.js","App.js","constants.js","reportWebVitals.js","index.js"],"names":["getRandomArbitrary","min","max","Math","random","App","ref","useRef","videoRef","useState","width","setWidth","height","setHeight","parentLeft","setParentLeft","parentTop","setParentTop","dustSize","setDustSize","x","y","setDustPos","opacity","setOpacity","handleMouseMove","useCallback","e","clientX","clientY","newDustX","newDustY","useEffect","current","offsetWidth","offsetHeight","rect","getBoundingClientRect","left","top","alternateVideo","setTimeout","video","navigator","mediaDevices","getUserMedia","then","stream","srcObject","play","class","className","onMouseMove","style","position","autoplay","url","playing","muted","loop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAAO,SAASA,EAAmBC,EAAKC,GACpC,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,E,sBCU1B,SAASI,IACtB,IAAMC,EAAMC,mBACNC,EAAWD,mBAFW,EAGFE,mBAAS,GAHP,mBAGrBC,EAHqB,KAGdC,EAHc,OAIAF,mBAAS,GAJT,mBAIrBG,EAJqB,KAIbC,EAJa,OAKQJ,mBAAS,GALjB,mBAKrBK,EALqB,KAKTC,EALS,OAMMN,mBAAS,GANf,mBAMrBO,EANqB,KAMVC,EANU,OAOIR,mBAAS,IAPb,mBAOrBS,EAPqB,KAOXC,EAPW,OAQEV,mBAAS,CAAEW,EAAG,EAAGC,EAAG,IARtB,mBAQZC,GARY,aASUb,oBAAS,GATnB,gCAUEA,mBAAS,IAVX,mBAUrBc,EAVqB,KAUZC,EAVY,OAYEf,oBAAS,GAZX,mBActBgB,GAdsB,UAcJC,uBACtB,SAACC,GACC,IAAMP,EAAIO,EAAEC,QACNP,EAAIM,EAAEE,QACNC,EAAW3B,KAAKF,IAAImB,EAAIN,EAAYJ,EAAQQ,GAC5Ca,EAAW5B,KAAKF,IAAIoB,EAAIL,EAAWJ,EAASM,GAClDI,EAAW,CACTF,EAAGU,EACHT,EAAGU,MAGP,CAACjB,EAAYE,EAAWE,KAGDQ,uBAAY,SAACC,GACpCR,EAAYD,EAAW,OAWzBc,qBAAU,WACR,IAAMtB,EAAQJ,EAAI2B,QAAQC,YACpBtB,EAASN,EAAI2B,QAAQE,aACrBC,EAAO9B,EAAI2B,QAAQI,wBACzBtB,EAAcqB,EAAKE,MACnBrB,EAAamB,EAAKG,KAClB5B,EAASD,GACTG,EAAUD,KACT,IAEH,IAAM4B,EAAiBd,uBAAY,WACjCe,YAAW,WACTjB,EAAW,IACXiB,YAAW,WACTjB,EAAW,GACXgB,MACCxC,EAAmB,IAAM,QAC3BA,EAAmB,IAAM,SAC3B,IAgBH,OAdAgC,qBAAU,WACR,IAAMU,EAAQlC,EAASyB,QAEpBU,UAAUC,cAAgBD,UAAUC,aAAaC,cAElDF,UAAUC,aAAaC,aAAa,CAAEH,OAAO,IAAQI,MAAK,SAASC,GAE/DL,EAAMM,UAAYD,EAClBL,EAAMO,UAGZT,MACC,IAGD,qBAAKU,MAAM,WAAX,SAGE,sBAAKC,UAAU,QAAQ7C,IAAKA,EAAK8C,YAAa3B,EAA9C,UACE,uBACEnB,IAAKE,EACL0C,MAAM,QACNxC,MAAM,OACNE,OAAO,OACPyC,MAAO,CACLC,SAAU,WACV/B,WAEFgC,UAAQ,IAGV,cAAC,IAAD,CACE7C,MAAM,OACNE,OAAO,OACP4C,IC9FkB,8BD+FlBC,SAAO,EACPC,OAAK,EACLC,MAAI,SE5Gd,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f5adc7ea.chunk.js","sourcesContent":["export function getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport ReactPlayer from \"react-player/vimeo\";\nimport { getRandomArbitrary } from \"./utils\";\nimport Square from \"./Square\";\nimport Dustball from \"./Dustball\";\nimport \"./App.css\";\n\nimport { videoURLs as videos, animationURL } from \"./constants\";\n\nconst animationSpeed = 150;\n\nexport default function App() {\n  const ref = useRef();\n  const videoRef = useRef();\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [parentLeft, setParentLeft] = useState(0);\n  const [parentTop, setParentTop] = useState(0);\n  const [dustSize, setDustSize] = useState(20);\n  const [dustPos, setDustPos] = useState({ x: 0, y: 0 });\n  const [showSquares, setShowSquares] = useState(false);\n  const [opacity, setOpacity] = useState(0);\n\n  const [started, setStarted] = useState(false);\n\n  const handleMouseMove = useCallback(\n    (e) => {\n      const x = e.clientX;\n      const y = e.clientY;\n      const newDustX = Math.min(x - parentLeft, width - dustSize);\n      const newDustY = Math.min(y - parentTop, height - dustSize);\n      setDustPos({\n        x: newDustX,\n        y: newDustY\n      });\n    },\n    [parentLeft, parentTop, dustSize]\n  );\n\n  const handleMouseEnter = useCallback((e) => {\n    setDustSize(dustSize + 10);\n  });\n\n  const handleClick = () => {\n    if (!started) {\n      setStarted(true)\n    } else {\n      setShowSquares(!showSquares);\n    }\n  };\n\n  useEffect(() => {\n    const width = ref.current.offsetWidth;\n    const height = ref.current.offsetHeight;\n    const rect = ref.current.getBoundingClientRect();\n    setParentLeft(rect.left);\n    setParentTop(rect.top);\n    setWidth(width);\n    setHeight(height);\n  }, []);\n\n  const alternateVideo = useCallback(() => {\n    setTimeout(() => {\n      setOpacity(0.2);\n      setTimeout(() => {\n        setOpacity(0);\n        alternateVideo();\n      }, getRandomArbitrary(3000, 4000))\n    }, getRandomArbitrary(8000, 12000))\n  }, [])\n\n  useEffect(() => {\n    const video = videoRef.current;\n    // Get access to the camera!\n    if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      // Not adding `{ audio: true }` since we only want video now\n      navigator.mediaDevices.getUserMedia({ video: true }).then(function(stream) {\n          //video.src = window.URL.createObjectURL(stream);\n          video.srcObject = stream;\n          video.play();\n      });\n    }\n    alternateVideo();\n  }, [])\n\n  return (\n    <div class=\"app-root\">\n      {/* <audio src={`${githubMediaUrl}/src/audio/${track}.wav`} ref={audioRef}></audio> */}\n      {/* <button onClick={handleClick}>{started ? \"Toggle Squares\" : \"Start!\"}</button> */}\n      <div className=\"demo0\" ref={ref} onMouseMove={handleMouseMove}>\n        <video\n          ref={videoRef} \n          class=\"video\" \n          width=\"100%\" \n          height=\"100%\"\n          style={{\n            position: \"absolute\",\n            opacity\n          }} \n          autoplay\n        >\n        </video>\n        <ReactPlayer \n          width=\"100%\"\n          height=\"100%\"\n          url={animationURL}\n          playing\n          muted\n          loop\n        />\n        {/* {started && videos.map((videoSrc, index) => (\n          <Square\n            key={videoSrc + index}\n            videoSrc={videoSrc}\n            width={width}\n            height={height}\n            animationSpeed={animationSpeed}\n            onMouseEnter={handleMouseEnter}\n            show={showSquares}\n          />\n        ))}\n        {started && <Dustball x={dustPos.x} y={dustPos.y} size={dustSize} />} */}\n      </div>\n    </div>\n  );\n}\n","export const githubMediaUrl = \"https://media.githubusercontent.com/media/nomrik/lcds/main\";\n\nexport const videoURLs = [\n    \"https://vimeo.com/523722737/332466a398\",\n    \"https://vimeo.com/523725045/b828788317\",\n    \"https://vimeo.com/523726526/4bf5f89e13\",\n    \"https://vimeo.com/523728447/68d7c908b8\",\n    \"https://vimeo.com/523729836/c3c618396b\",\n    \"https://vimeo.com/523731442/9aa1b3256e\",\n]\n\nexport const animationURL = \"https://vimeo.com/523876541\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}